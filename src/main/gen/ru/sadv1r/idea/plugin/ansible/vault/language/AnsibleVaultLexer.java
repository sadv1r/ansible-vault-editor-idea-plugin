/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.sadv1r.idea.plugin.ansible.vault.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.sadv1r.idea.plugin.ansible.vault.language.psi.AnsibleVaultTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnsibleVault.flex</tt>
 */
class AnsibleVaultLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_SEPARATOR = 2;
  public static final int WAITING_PART = 4;
  public static final int WAITING_NEW_LINE = 6;
  public static final int WAITING_DATA = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15552 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\6"+
    "\1\12\1\23\1\6\1\12\1\24\1\6\1\12\1\25\1\26\1\12\1\7\1\27\1\1\1\7\4\12\1\30"+
    "\6\12\1\31\1\32\1\33\1\1\3\12\1\34\6\12\1\15\1\35\2\12\1\36\2\12\1\37\1\1"+
    "\1\12\1\40\4\1\1\12\1\41\1\1\1\42\1\21\7\12\1\43\1\6\1\31\1\44\1\32\1\45\1"+
    "\46\1\47\1\43\1\15\1\50\1\44\1\32\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\32"+
    "\1\57\1\60\1\61\1\43\1\62\1\63\1\44\1\32\1\57\1\64\1\65\1\43\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\54\1\1\1\75\1\76\1\32\1\77\1\100\1\101\1\43\1\1\1\75"+
    "\1\76\1\32\1\102\1\100\1\103\1\43\1\104\1\105\1\76\1\12\1\34\1\106\1\107\1"+
    "\43\1\110\1\111\1\112\1\12\1\113\1\114\1\115\1\54\1\116\1\6\2\12\1\7\1\117"+
    "\1\120\2\1\1\121\1\122\1\123\1\124\1\125\1\126\2\1\1\61\1\127\1\120\1\130"+
    "\1\131\1\12\1\132\1\6\1\133\1\131\1\12\1\132\1\134\3\1\4\12\1\120\4\12\1\135"+
    "\2\12\1\136\2\12\1\137\24\12\1\140\1\141\2\12\1\140\2\12\1\142\1\143\1\13"+
    "\3\12\1\143\3\12\1\34\2\1\1\12\1\1\5\12\1\144\1\6\45\12\1\145\1\12\1\6\1\7"+
    "\4\12\1\146\1\147\1\150\1\151\1\12\1\151\1\12\1\152\1\150\1\153\5\12\1\154"+
    "\1\120\1\1\1\155\1\120\5\12\1\24\2\12\1\7\4\12\1\55\1\12\1\117\2\40\1\54\1"+
    "\12\1\37\1\151\2\12\1\40\1\12\1\156\1\120\2\1\1\12\1\40\3\12\1\117\1\12\1"+
    "\145\2\120\1\157\1\117\4\1\4\12\1\40\1\120\1\160\1\152\3\12\1\35\3\12\1\152"+
    "\3\12\1\24\1\161\1\35\1\12\1\37\1\147\4\1\1\162\1\12\1\163\17\12\1\164\21"+
    "\12\1\144\2\12\1\144\1\165\1\12\1\37\3\12\1\166\1\167\1\170\1\132\1\167\3"+
    "\1\1\171\1\61\1\172\1\1\1\173\1\1\1\132\3\1\2\12\1\61\1\174\1\175\1\176\1"+
    "\177\1\200\1\1\2\12\1\147\62\1\1\201\2\12\1\156\161\1\2\12\1\117\2\12\1\117"+
    "\10\12\1\202\1\152\2\12\1\136\3\12\1\203\1\171\1\12\1\204\4\205\2\12\2\1\1"+
    "\171\35\1\1\206\1\1\1\6\1\207\1\6\4\12\1\210\1\6\4\12\1\137\1\211\1\12\1\37"+
    "\1\6\4\12\1\117\1\1\1\12\1\7\3\1\1\12\40\1\133\12\1\55\4\1\135\12\1\55\2\1"+
    "\10\12\1\132\4\1\2\12\1\37\20\12\1\132\1\12\1\212\1\1\3\12\1\213\7\12\1\15"+
    "\1\1\1\214\1\215\5\12\1\216\1\12\1\117\1\24\3\1\1\214\2\12\1\24\1\1\3\12\1"+
    "\152\4\12\1\55\1\120\1\12\1\217\1\35\1\12\1\37\2\12\1\152\1\12\1\132\4\12"+
    "\1\220\1\120\1\12\1\221\3\12\1\204\1\37\1\120\1\12\1\112\4\12\1\27\1\155\1"+
    "\12\1\222\1\223\1\224\1\205\2\12\1\137\1\55\7\12\1\225\1\120\72\12\1\152\1"+
    "\12\1\226\2\12\1\40\20\1\26\12\1\37\6\12\1\156\2\1\1\204\1\227\1\32\1\230"+
    "\1\231\6\12\1\15\1\1\1\232\25\12\1\37\1\1\4\12\1\215\2\12\1\24\2\1\1\40\1"+
    "\12\1\1\1\12\1\233\1\234\2\1\1\133\7\12\1\132\1\1\1\120\1\6\1\235\1\6\1\7"+
    "\1\201\4\12\1\117\1\236\1\237\2\1\1\240\1\12\1\13\1\241\2\37\2\1\7\12\1\7"+
    "\4\1\3\12\1\151\7\1\1\242\10\1\1\12\1\132\3\12\2\61\1\1\2\12\1\1\1\12\1\7"+
    "\2\12\1\7\1\12\1\37\2\12\1\243\1\244\2\1\11\12\1\37\1\120\2\12\1\243\1\12"+
    "\1\40\2\12\1\24\3\12\1\152\11\1\23\12\1\204\1\12\1\55\1\24\11\1\1\245\2\12"+
    "\1\246\1\12\1\55\1\12\1\204\1\12\1\117\4\1\1\12\1\247\1\12\1\55\1\12\1\156"+
    "\4\1\3\12\1\250\4\1\1\251\1\252\1\12\1\253\2\1\1\12\1\132\1\12\1\132\2\1\1"+
    "\131\1\12\1\204\1\1\3\12\1\55\1\12\1\55\1\12\1\27\1\12\1\15\6\1\4\12\1\147"+
    "\3\1\3\12\1\27\3\12\1\27\60\1\4\12\1\204\1\1\1\54\1\171\3\12\1\7\1\1\1\12"+
    "\1\147\1\120\3\12\1\254\1\1\2\12\1\255\4\12\1\256\1\257\2\1\1\12\1\21\1\12"+
    "\1\260\4\1\1\261\1\25\1\147\3\12\1\7\1\120\1\31\1\44\1\32\1\57\1\64\1\262"+
    "\1\263\1\151\10\1\4\12\1\7\1\120\2\1\4\12\1\264\1\120\12\1\3\12\1\265\1\61"+
    "\1\266\2\1\4\12\1\267\1\120\2\1\3\12\1\24\1\120\3\1\1\12\1\77\1\40\1\120\26"+
    "\1\4\12\1\120\1\171\34\1\3\12\1\147\20\1\1\32\2\12\1\13\1\61\1\120\1\1\1\215"+
    "\1\12\1\215\1\131\1\204\64\1\71\12\1\156\6\1\6\12\1\117\1\1\14\12\1\152\53"+
    "\1\2\12\1\117\75\1\44\12\1\204\33\1\43\12\1\147\1\12\1\117\1\120\6\1\1\12"+
    "\1\37\1\151\3\12\1\204\1\152\1\120\1\232\1\270\1\12\67\1\4\12\1\151\2\12\1"+
    "\117\1\171\1\12\4\1\1\61\1\1\76\12\1\132\1\1\57\12\1\27\20\1\1\15\77\1\6\12"+
    "\1\7\1\132\1\147\1\271\114\1\1\272\1\273\1\274\1\1\1\275\11\1\1\276\33\1\5"+
    "\12\1\133\3\12\1\150\1\277\1\300\1\301\3\12\1\302\1\303\1\12\1\304\1\305\1"+
    "\76\24\12\1\265\1\12\1\76\1\137\1\12\1\137\1\12\1\133\1\12\1\133\1\117\1\12"+
    "\1\117\1\12\1\32\1\12\1\32\1\12\1\306\3\307\40\1\3\12\1\226\2\12\1\132\1\310"+
    "\1\172\1\160\1\6\25\1\1\13\1\216\1\311\75\1\14\12\1\151\1\204\2\1\4\12\1\7"+
    "\1\120\112\1\1\301\1\12\1\312\1\313\1\314\1\315\1\316\1\317\1\320\1\40\1\321"+
    "\1\40\47\1\1\12\1\156\1\12\1\156\1\12\1\156\47\1\55\12\1\204\2\1\103\12\1"+
    "\151\15\12\1\37\150\12\1\15\25\1\41\12\1\37\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\1\24\2\0\1\25\22\0\1\23\3\0\1\1\11\0\1\17\1\0\2\16\1\20\2\16\1\21\1"+
    "\22\3\16\1\0\1\15\5\0\1\2\1\6\2\26\1\10\3\26\1\5\2\26\1\7\1\26\1\3\4\26\1"+
    "\4\1\14\1\13\1\12\4\26\4\0\1\11\1\0\32\26\17\0\1\26\12\0\1\26\4\0\1\26\5\0"+
    "\27\26\1\0\12\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0\1\26\1\0\5\26\1\0\2\26\2"+
    "\0\4\26\1\0\1\26\6\0\1\26\1\0\3\26\1\0\1\26\1\0\4\26\1\0\23\26\1\0\20\26\2"+
    "\0\1\26\6\0\10\26\10\0\16\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0\3\26"+
    "\15\0\12\16\4\0\6\26\1\0\10\26\2\0\12\26\1\0\6\26\12\16\3\26\2\0\14\26\2\0"+
    "\3\26\12\16\14\26\4\0\1\26\5\0\16\26\2\0\14\26\4\0\5\26\1\0\10\26\6\0\20\26"+
    "\2\0\12\16\1\26\2\0\16\26\1\0\1\26\3\0\4\26\2\0\11\26\2\0\2\26\2\0\4\26\10"+
    "\0\1\26\4\0\2\26\1\0\1\26\1\0\3\26\1\0\6\26\4\0\2\26\1\0\2\26\1\0\2\26\1\0"+
    "\2\26\2\0\1\26\1\0\5\26\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0\1\26\7\0\12"+
    "\16\6\26\13\0\3\26\1\0\11\26\1\0\2\26\1\0\2\26\1\0\5\26\2\0\12\26\1\0\3\26"+
    "\1\0\3\26\2\0\1\26\30\0\1\26\7\0\3\26\1\0\10\26\2\0\6\26\2\0\2\26\2\0\3\26"+
    "\10\0\2\26\4\0\2\26\1\0\1\26\1\0\1\26\20\0\2\26\1\0\6\26\3\0\3\26\1\0\4\26"+
    "\3\0\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26\4\0\5\26\3\0\3\26"+
    "\1\0\4\26\2\0\1\26\6\0\1\26\10\0\4\26\1\0\10\26\1\0\3\26\1\0\30\26\3\0\10"+
    "\26\1\0\3\26\1\0\4\26\7\0\2\26\1\0\3\26\5\0\4\26\1\0\5\26\2\0\4\26\5\0\2\26"+
    "\7\0\1\26\2\0\2\26\16\0\3\26\1\0\10\26\1\0\7\26\1\0\3\26\1\0\5\26\5\0\4\26"+
    "\7\0\1\26\12\0\6\26\2\0\2\26\1\0\22\26\3\0\10\26\1\0\11\26\1\0\1\26\2\0\7"+
    "\26\3\0\1\26\4\0\6\26\1\0\1\26\1\0\10\26\2\0\2\26\14\0\17\26\1\0\12\16\7\0"+
    "\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1"+
    "\26\1\0\1\26\2\0\2\26\1\0\15\26\1\0\3\26\2\0\5\26\1\0\1\26\1\0\6\26\2\0\12"+
    "\16\2\0\4\26\10\0\2\26\13\0\1\26\1\0\1\26\1\0\1\26\4\0\12\26\1\0\24\26\3\0"+
    "\5\26\1\0\12\26\6\0\1\26\11\0\12\16\4\26\2\0\6\26\1\0\1\26\5\0\1\26\2\0\13"+
    "\26\1\0\15\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0\1\26\1\0\4\26\2\0\7"+
    "\26\1\0\1\26\1\0\4\26\2\0\16\26\2\0\6\26\2\0\15\26\2\0\14\26\3\0\13\26\7\0"+
    "\15\26\1\0\7\26\13\0\4\26\14\0\1\26\1\0\2\26\14\0\4\26\3\0\1\26\4\0\2\26\15"+
    "\0\3\26\2\0\12\26\15\0\1\26\23\0\5\26\12\16\3\0\6\26\1\0\23\26\1\0\2\26\6"+
    "\0\6\26\5\0\15\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\6\26\1\0\7\26\1\0\1\26\3"+
    "\0\3\26\1\0\7\26\3\0\4\26\2\0\6\26\23\0\1\26\4\0\1\26\14\0\1\26\15\0\1\26"+
    "\2\0\1\26\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26\7\0\17\26\6\0\15\26\7\0\10"+
    "\26\11\0\7\26\1\0\7\26\6\0\3\26\11\0\5\26\2\0\5\26\3\0\7\26\2\0\2\26\2\0\3"+
    "\26\5\0\13\26\12\16\2\26\4\0\3\26\1\0\12\26\1\0\1\26\7\0\11\26\2\0\27\26\2"+
    "\0\15\26\3\0\1\26\1\0\1\26\2\0\1\26\16\0\1\26\12\16\5\26\3\0\5\26\12\0\6\26"+
    "\2\0\6\26\2\0\6\26\11\0\13\26\1\0\2\26\2\0\7\26\4\0\5\26\3\0\5\26\5\0\12\26"+
    "\1\0\5\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\12\26\3\0\15\26\3\0\2\26\30\0\16"+
    "\26\4\0\1\26\2\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\14\26\1\0\16\26\1\0\2"+
    "\26\1\0\1\26\15\0\1\26\2\0\4\26\4\0\10\26\1\0\5\26\12\0\6\26\2\0\1\26\1\0"+
    "\14\26\1\0\2\26\3\0\1\26\2\0\4\26\1\0\2\26\12\0\10\26\6\0\6\26\1\0\2\26\5"+
    "\0\10\26\1\0\3\26\1\0\13\26\4\0\3\26\4\0\6\26\1\0\12\16\4\26\2\0\1\26\11\0"+
    "\5\26\5\0\3\26\3\0\12\16\1\26\1\0\1\26\3\0\10\26\6\0\1\26\1\0\7\26\1\0\1\26"+
    "\1\0\4\26\1\0\2\26\6\0\1\26\5\0\7\26\2\0\7\26\3\0\6\26\1\0\1\26\10\0\6\26"+
    "\2\0\10\26\10\0\6\26\2\0\1\26\3\0\1\26\13\0\10\26\5\0\15\26\3\0\2\26\6\0\5"+
    "\26\3\0\6\26\10\0\10\26\2\0\7\26\16\0\4\26\4\0\3\26\15\0\1\26\2\0\2\26\2\0"+
    "\4\26\1\0\14\26\1\0\1\26\1\0\7\26\1\0\21\26\1\0\4\26\2\0\10\26\1\0\7\26\1"+
    "\0\14\26\1\0\4\26\1\0\5\26\1\0\1\26\3\0\11\26\1\0\10\26\2\0\22\16\5\0\1\26"+
    "\12\0\2\26\1\0\2\26\1\0\5\26\6\0\2\26\1\0\1\26\2\0\1\26\1\0\12\26\1\0\4\26"+
    "\1\0\1\26\1\0\1\26\6\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0\3\26\1\0\2\26\1"+
    "\0\1\26\2\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\2\26\1\0\1\26\2\0"+
    "\4\26\1\0\7\26\1\0\4\26\1\0\4\26\1\0\1\26\1\0\12\26\1\0\5\26\1\0\3\26\1\0"+
    "\5\26\1\0\5\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\2\1\1\2\1\1\1\3\1\4\2\1\6\0"+
    "\1\5\1\3\10\0\1\5\17\0\1\6\104\0\121\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\163"+
    "\0\241\0\270\0\163\0\317\0\346\0\375\0\u0114\0\u012b"+
    "\0\u0142\0\u0159\0\u0170\0\u0187\0\163\0\u019e\0\u01b5\0\u01cc"+
    "\0\u01e3\0\u01fa\0\u0211\0\u0228\0\u023f\0\163\0\u0256\0\u026d"+
    "\0\u0284\0\u029b\0\u02b2\0\u02c9\0\u02e0\0\u02f7\0\u030e\0\u0325"+
    "\0\u033c\0\u0353\0\u036a\0\u0381\0\u0398\0\163\0\u03af\0\u03c6"+
    "\0\u03dd\0\u03f4\0\u040b\0\u0422\0\u0439\0\u0450\0\u0467\0\u047e"+
    "\0\u0495\0\u04ac\0\u04c3\0\u04da\0\u04f1\0\u0508\0\u051f\0\u0536"+
    "\0\u054d\0\u0564\0\u057b\0\u0592\0\u05a9\0\u05c0\0\u05d7\0\u05ee"+
    "\0\u0605\0\u061c\0\u0633\0\u064a\0\u0661\0\u0678\0\u068f\0\u06a6"+
    "\0\u06bd\0\u06d4\0\u06eb\0\u0702\0\u0719\0\u0730\0\u0747\0\u075e"+
    "\0\u0775\0\u078c\0\u07a3\0\u07ba\0\u07d1\0\u07e8\0\u07ff\0\u0816"+
    "\0\u082d\0\u0844\0\u085b\0\u0872\0\u0889\0\u08a0\0\u08b7\0\u08ce"+
    "\0\u08e5\0\u08fc\0\u0913\0\u092a\0\u0941\0\u0958\0\u096f\0\u0986"+
    "\0\u099d\0\u09b4\0\u09cb\0\u09e2\0\u09f9\0\u0a10\0\u0a27\0\u0a3e"+
    "\0\u0a55\0\u0a6c\0\u0a83\0\u0a9a\0\u0ab1\0\u0ac8\0\u0adf\0\u0af6"+
    "\0\u0b0d\0\u0b24\0\u0b3b\0\u0b52\0\u0b69\0\u0b80\0\u0b97\0\u0bae"+
    "\0\u0bc5\0\u0bdc\0\u0bf3\0\u0c0a\0\u0c21\0\u0c38\0\u0c4f\0\u0c66"+
    "\0\u0c7d\0\u0c94\0\u0cab\0\u0cc2\0\u0cd9\0\u0cf0\0\u0d07\0\u0d1e"+
    "\0\u0d35\0\u0d4c\0\u0d63\0\u0d7a\0\u0d91\0\u0da8\0\u0dbf\0\u0dd6"+
    "\0\u0ded\0\u0e04\0\u0e1b\0\u0e32\0\u0e49\0\u0e60\0\u0e77\0\u0e8e"+
    "\0\u0ea5\0\u0ebc\0\u0ed3\0\u0eea\0\u0f01\0\u0f18\0\u0f2f\0\u0f46"+
    "\0\u0f5d\0\u0f74\0\u0f8b\0\u0fa2\0\u0fb9\0\u0fd0\0\u0fe7\0\u0ffe"+
    "\0\u1015\0\u102c\0\u1043\0\u105a\0\u1071\0\u1088\0\u109f\0\u10b6"+
    "\0\u10cd\0\u10e4\0\u10fb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\42\6\1\10\13\6\1\11\13\6\1\12"+
    "\1\6\3\12\27\6\2\13\1\14\3\6\13\15\1\6"+
    "\1\15\1\6\3\15\3\6\1\15\31\0\1\16\34\0"+
    "\1\17\35\0\1\20\33\0\1\21\4\0\13\22\1\0"+
    "\1\22\1\0\3\22\3\0\1\22\3\0\1\23\27\0"+
    "\1\24\40\0\1\25\1\0\3\25\31\0\1\13\3\0"+
    "\13\26\1\0\1\26\1\0\3\26\3\0\1\26\4\0"+
    "\1\27\42\0\1\30\10\0\13\31\1\0\1\31\1\0"+
    "\3\31\3\0\1\31\5\0\1\32\42\0\1\33\7\0"+
    "\13\34\1\0\1\34\1\0\3\34\3\0\1\34\6\0"+
    "\1\35\42\0\1\36\6\0\13\37\1\0\1\37\1\0"+
    "\3\37\3\0\1\37\7\0\1\40\21\0\13\41\1\0"+
    "\1\41\1\0\3\41\3\0\1\41\10\0\1\42\20\0"+
    "\13\43\1\0\1\43\1\0\3\43\3\0\1\43\11\0"+
    "\1\44\17\0\13\45\1\0\1\45\1\0\3\45\3\0"+
    "\1\45\12\0\1\46\16\0\13\47\1\0\1\47\1\0"+
    "\3\47\3\0\1\47\2\0\1\50\26\0\13\51\1\0"+
    "\1\51\1\0\3\51\3\0\1\51\13\0\1\52\15\0"+
    "\13\53\1\0\1\53\1\0\3\53\3\0\1\53\7\0"+
    "\1\54\21\0\13\55\1\0\1\55\1\0\3\55\3\0"+
    "\1\55\14\0\1\56\14\0\13\57\1\0\1\57\1\0"+
    "\3\57\3\0\1\57\2\0\13\60\1\0\1\60\1\0"+
    "\3\60\3\0\1\60\2\0\13\61\1\0\1\61\1\0"+
    "\3\61\3\0\1\61\2\0\13\62\1\0\1\62\1\0"+
    "\3\62\3\0\1\62\2\0\13\63\1\0\1\63\1\0"+
    "\3\63\3\0\1\63\2\0\13\64\1\0\1\64\1\0"+
    "\3\64\3\0\1\64\2\0\13\65\1\0\1\65\1\0"+
    "\3\65\3\0\1\65\2\0\13\66\1\0\1\66\1\0"+
    "\3\66\3\0\1\66\2\0\13\67\1\0\1\67\1\0"+
    "\3\67\3\0\1\67\2\0\13\70\1\0\1\70\1\0"+
    "\3\70\3\0\1\70\2\0\13\71\1\0\1\71\1\0"+
    "\3\71\3\0\1\71\2\0\13\72\1\0\1\72\1\0"+
    "\3\72\3\0\1\72\2\0\13\73\1\0\1\73\1\0"+
    "\3\73\3\0\1\73\2\0\13\74\1\0\1\74\1\0"+
    "\3\74\3\0\1\74\2\0\13\75\1\0\1\75\1\0"+
    "\3\75\3\0\1\75\2\0\13\76\1\0\1\76\1\0"+
    "\3\76\3\0\1\76\2\0\13\77\1\0\1\77\1\0"+
    "\3\77\3\0\1\77\2\0\13\100\1\0\1\100\1\0"+
    "\3\100\3\0\1\100\2\0\13\101\1\0\1\101\1\0"+
    "\3\101\3\0\1\101\2\0\13\102\1\0\1\102\1\0"+
    "\3\102\3\0\1\102\2\0\13\103\1\0\1\103\1\0"+
    "\3\103\3\0\1\103\2\0\13\104\1\0\1\104\1\0"+
    "\3\104\3\0\1\104\2\0\13\105\1\0\1\105\1\0"+
    "\3\105\3\0\1\105\2\0\13\106\1\0\1\106\1\0"+
    "\3\106\3\0\1\106\2\0\13\107\1\0\1\107\1\0"+
    "\3\107\3\0\1\107\2\0\13\110\1\0\1\110\1\0"+
    "\3\110\3\0\1\110\2\0\13\111\1\0\1\111\1\0"+
    "\3\111\3\0\1\111\2\0\13\112\1\0\1\112\1\0"+
    "\3\112\3\0\1\112\2\0\13\113\1\0\1\113\1\0"+
    "\3\113\3\0\1\113\2\0\13\114\1\0\1\114\1\0"+
    "\3\114\3\0\1\114\2\0\13\115\1\0\1\115\1\0"+
    "\3\115\3\0\1\115\2\0\13\116\1\0\1\116\1\0"+
    "\3\116\3\0\1\116\2\0\13\117\1\0\1\117\1\0"+
    "\3\117\3\0\1\117\2\0\13\120\1\0\1\120\1\0"+
    "\3\120\3\0\1\120\2\0\13\121\1\0\1\121\1\0"+
    "\3\121\3\0\1\121\2\0\13\122\1\0\1\122\1\0"+
    "\3\122\3\0\1\122\2\0\13\123\1\0\1\123\1\0"+
    "\3\123\3\0\1\123\2\0\13\124\1\0\1\124\1\0"+
    "\3\124\3\0\1\124\2\0\13\125\1\0\1\125\1\0"+
    "\3\125\3\0\1\125\2\0\13\126\1\0\1\126\1\0"+
    "\3\126\3\0\1\126\2\0\13\127\1\0\1\127\1\0"+
    "\3\127\3\0\1\127\2\0\13\130\1\0\1\130\1\0"+
    "\3\130\3\0\1\130\2\0\13\131\1\0\1\131\1\0"+
    "\3\131\3\0\1\131\2\0\13\132\1\0\1\132\1\0"+
    "\3\132\3\0\1\132\2\0\13\133\1\0\1\133\1\0"+
    "\3\133\3\0\1\133\2\0\13\134\1\0\1\134\1\0"+
    "\3\134\3\0\1\134\2\0\13\135\1\0\1\135\1\0"+
    "\3\135\3\0\1\135\2\0\13\136\1\0\1\136\1\0"+
    "\3\136\3\0\1\136\2\0\13\137\1\0\1\137\1\0"+
    "\3\137\3\0\1\137\2\0\13\140\1\0\1\140\1\0"+
    "\3\140\3\0\1\140\2\0\13\141\1\0\1\141\1\0"+
    "\3\141\3\0\1\141\2\0\13\142\1\0\1\142\1\0"+
    "\3\142\3\0\1\142\2\0\13\143\1\0\1\143\1\0"+
    "\3\143\3\0\1\143\2\0\13\144\1\0\1\144\1\0"+
    "\3\144\3\0\1\144\2\0\13\145\1\0\1\145\1\0"+
    "\3\145\3\0\1\145\2\0\13\146\1\0\1\146\1\0"+
    "\3\146\3\0\1\146\2\0\13\147\1\0\1\147\1\0"+
    "\3\147\3\0\1\147\2\0\13\150\1\0\1\150\1\0"+
    "\3\150\3\0\1\150\2\0\13\151\1\0\1\151\1\0"+
    "\3\151\3\0\1\151\2\0\13\152\1\0\1\152\1\0"+
    "\3\152\3\0\1\152\2\0\13\153\1\0\1\153\1\0"+
    "\3\153\3\0\1\153\2\0\13\154\1\0\1\154\1\0"+
    "\3\154\3\0\1\154\2\0\13\155\1\0\1\155\1\0"+
    "\3\155\3\0\1\155\2\0\13\156\1\0\1\156\1\0"+
    "\3\156\3\0\1\156\2\0\13\157\1\0\1\157\1\0"+
    "\3\157\3\0\1\157\2\0\13\160\1\0\1\160\1\0"+
    "\3\160\3\0\1\160\2\0\13\161\1\0\1\161\1\0"+
    "\3\161\3\0\1\161\23\0\2\162\4\0\13\163\1\0"+
    "\1\163\1\0\3\163\3\0\1\163\2\0\13\164\1\0"+
    "\1\164\1\0\3\164\3\0\1\164\2\0\13\165\1\0"+
    "\1\165\1\0\3\165\3\0\1\165\2\0\13\166\1\0"+
    "\1\166\1\0\3\166\3\0\1\166\2\0\13\167\1\0"+
    "\1\167\1\0\3\167\3\0\1\167\2\0\13\170\1\0"+
    "\1\170\1\0\3\170\3\0\1\170\2\0\13\171\1\0"+
    "\1\171\1\0\3\171\3\0\1\171\2\0\13\172\1\0"+
    "\1\172\1\0\3\172\3\0\1\172\2\0\13\173\1\0"+
    "\1\173\1\0\3\173\3\0\1\173\2\0\13\174\1\0"+
    "\1\174\1\0\3\174\3\0\1\174\2\0\13\175\1\0"+
    "\1\175\1\0\3\175\3\0\1\175\2\0\13\176\1\0"+
    "\1\176\1\0\3\176\3\0\1\176\2\0\13\177\1\0"+
    "\1\177\1\0\3\177\3\0\1\177\2\0\13\200\1\0"+
    "\1\200\1\0\3\200\3\0\1\200\2\0\13\201\1\0"+
    "\1\201\1\0\3\201\3\0\1\201\2\0\13\202\1\0"+
    "\1\202\1\0\3\202\3\0\1\202\2\0\13\203\1\0"+
    "\1\203\1\0\3\203\3\0\1\203\2\0\13\204\1\0"+
    "\1\204\1\0\3\204\3\0\1\204\2\0\13\205\1\0"+
    "\1\205\1\0\3\205\3\0\1\205\2\0\13\206\1\0"+
    "\1\206\1\0\3\206\3\0\1\206\2\0\13\207\1\0"+
    "\1\207\1\0\3\207\3\0\1\207\2\0\13\210\1\0"+
    "\1\210\1\0\3\210\3\0\1\210\2\0\13\211\1\0"+
    "\1\211\1\0\3\211\3\0\1\211\2\0\13\212\1\0"+
    "\1\212\1\0\3\212\3\0\1\212\2\0\13\213\1\0"+
    "\1\213\1\0\3\213\3\0\1\213\2\0\13\214\1\0"+
    "\1\214\1\0\3\214\3\0\1\214\2\0\13\215\1\0"+
    "\1\215\1\0\3\215\3\0\1\215\2\0\13\216\1\0"+
    "\1\216\1\0\3\216\3\0\1\216\2\0\13\217\1\0"+
    "\1\217\1\0\3\217\3\0\1\217\2\0\13\220\1\0"+
    "\1\220\1\0\3\220\3\0\1\220\2\0\13\221\1\0"+
    "\1\221\1\0\3\221\3\0\1\221\2\0\13\222\1\0"+
    "\1\222\1\0\3\222\3\0\1\222\2\0\13\223\1\0"+
    "\1\223\1\0\3\223\3\0\1\223\2\0\13\224\1\0"+
    "\1\224\1\0\3\224\3\0\1\224\2\0\13\225\1\0"+
    "\1\225\1\0\3\225\3\0\1\225\2\0\13\226\1\0"+
    "\1\226\1\0\3\226\3\0\1\226\2\0\13\227\1\0"+
    "\1\227\1\0\3\227\3\0\1\227\2\0\13\230\1\0"+
    "\1\230\1\0\3\230\3\0\1\230\2\0\13\231\1\0"+
    "\1\231\1\0\3\231\3\0\1\231\2\0\13\232\1\0"+
    "\1\232\1\0\3\232\3\0\1\232\2\0\13\233\1\0"+
    "\1\233\1\0\3\233\3\0\1\233\2\0\13\234\1\0"+
    "\1\234\1\0\3\234\3\0\1\234\2\0\13\235\1\0"+
    "\1\235\1\0\3\235\3\0\1\235\2\0\13\236\1\0"+
    "\1\236\1\0\3\236\3\0\1\236\2\0\13\237\1\0"+
    "\1\237\1\0\3\237\3\0\1\237\2\0\13\240\1\0"+
    "\1\240\1\0\3\240\3\0\1\240\2\0\13\241\1\0"+
    "\1\241\1\0\3\241\3\0\1\241\2\0\13\242\1\0"+
    "\1\242\1\0\3\242\3\0\1\242\2\0\13\243\1\0"+
    "\1\243\1\0\3\243\3\0\1\243\2\0\13\244\1\0"+
    "\1\244\1\0\3\244\3\0\1\244\2\0\13\245\1\0"+
    "\1\245\1\0\3\245\3\0\1\245\2\0\13\246\1\0"+
    "\1\246\1\0\3\246\3\0\1\246\2\0\13\247\1\0"+
    "\1\247\1\0\3\247\3\0\1\247\2\0\13\250\1\0"+
    "\1\250\1\0\3\250\3\0\1\250\2\0\13\251\1\0"+
    "\1\251\1\0\3\251\3\0\1\251\2\0\13\252\1\0"+
    "\1\252\1\0\3\252\3\0\1\252\2\0\13\253\1\0"+
    "\1\253\1\0\3\253\3\0\1\253\2\0\13\254\1\0"+
    "\1\254\1\0\3\254\3\0\1\254\2\0\13\255\1\0"+
    "\1\255\1\0\3\255\3\0\1\255\2\0\13\256\1\0"+
    "\1\256\1\0\3\256\3\0\1\256\2\0\13\257\1\0"+
    "\1\257\1\0\3\257\3\0\1\257\2\0\13\260\1\0"+
    "\1\260\1\0\3\260\3\0\1\260\2\0\13\261\1\0"+
    "\1\261\1\0\3\261\3\0\1\261\2\0\13\262\1\0"+
    "\1\262\1\0\3\262\3\0\1\262\2\0\13\263\1\0"+
    "\1\263\1\0\3\263\3\0\1\263\2\0\13\264\1\0"+
    "\1\264\1\0\3\264\3\0\1\264\2\0\13\265\1\0"+
    "\1\265\1\0\3\265\3\0\1\265\2\0\13\266\1\0"+
    "\1\266\1\0\3\266\3\0\1\266\2\0\13\267\1\0"+
    "\1\267\1\0\3\267\3\0\1\267\2\0\13\270\1\0"+
    "\1\270\1\0\3\270\3\0\1\270\2\0\13\271\1\0"+
    "\1\271\1\0\3\271\3\0\1\271\2\0\13\272\1\0"+
    "\1\272\1\0\3\272\3\0\1\272\2\0\13\273\1\0"+
    "\1\273\1\0\3\273\3\0\1\273\2\0\13\274\1\0"+
    "\1\274\1\0\3\274\3\0\1\274\2\0\13\275\1\0"+
    "\1\275\1\0\3\275\3\0\1\275\2\0\13\276\1\0"+
    "\1\276\1\0\3\276\3\0\1\276\2\0\13\277\1\0"+
    "\1\277\1\0\3\277\3\0\1\277\2\0\13\300\1\0"+
    "\1\300\1\0\3\300\3\0\1\300\2\0\13\301\1\0"+
    "\1\301\1\0\3\301\3\0\1\301\2\0\13\302\1\0"+
    "\1\302\1\0\3\302\3\0\1\302\2\0\13\303\1\0"+
    "\1\303\1\0\3\303\2\162\1\0\1\303\2\0\13\303"+
    "\1\0\1\303\1\0\3\303\3\0\1\303";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\2\1\1\11\2\1\6\0"+
    "\1\1\1\11\10\0\1\11\17\0\1\11\104\0\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnsibleVaultLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 8: break;
          case 2: 
            { yybegin(WAITING_PART); return AnsibleVaultTypes.SEPARATOR;
            } 
            // fall through
          case 9: break;
          case 3: 
            { yybegin(WAITING_SEPARATOR); return AnsibleVaultTypes.VERSION;
            } 
            // fall through
          case 10: break;
          case 4: 
            { yybegin(WAITING_DATA); return AnsibleVaultTypes.NEW_LINE;
            } 
            // fall through
          case 11: break;
          case 5: 
            { yybegin(WAITING_NEW_LINE); return AnsibleVaultTypes.CYPHER;
            } 
            // fall through
          case 12: break;
          case 6: 
            { yybegin(WAITING_SEPARATOR); return AnsibleVaultTypes.MAGIC_PART;
            } 
            // fall through
          case 13: break;
          case 7: 
            { return AnsibleVaultTypes.DATA;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
