name: Gradle CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.3

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2.1.0
        with:
          distribution: zulu
          java-version: 8
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2.1.5
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}
      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2.1.5
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:
      # Setup Java 8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2.1.0
        with:
          distribution: zulu
          java-version: 8
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Cache Gradle Dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2.1.5
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}
      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2.1.5
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ steps.properties.outputs.artifact }}

#      - name: Test generated vaults with official CLI tool
#        run: ./gradlew integrationTest
#      - name: Verify IDEA compatibility
#        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v1.0.3
#        with:
#          ide-versions: |
#            ideaIC:2019.1
#            ideaIU:2019.1
#            ideaIC:2020.1
#            ideaIU:2020.1
#            ideaIC:2021.1
#            ideaIU:2021.1
#            ideaIC:LATEST-EAP-SNAPSHOT
#            ideaIU:LATEST-EAP-SNAPSHOT
#      - name: Notify to Telegram
#        uses: yanzay/notify-telegram@v0.1.0
#        if: always()
#        with:
#          chat: ${{ secrets.TELEGRAM_TO }}
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          status: ${{ job.status }}

#  releaseDraft:
#    name: Release Draft
#    if: github.event_name != 'pull_request'
#    needs: [build]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Fetch Sources
#        uses: actions/checkout@v2
#
#      # Remove old release drafts by using the curl request for the available releases with draft flag
#      - name: Remove Old Release Drafts
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
#            | tr '\r\n' ' ' \
#            | jq '.[] | select(.draft == true) | .id' \
#            | xargs -I '{}' \
#          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}
#
#      # Create new release draft - which is not publicly visible and requires manual acceptance
#      - name: Create Release Draft
#        id: createDraft
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ needs.build.outputs.version }}
#          release_name: v${{ needs.build.outputs.version }}
#          body: ${{ needs.build.outputs.changelog }}
#          draft: true
#
## Download plugin artifact provided by the previous job
#      - name: Download Artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: plugin-artifact
#
## Upload artifact as a release asset
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.createDraft.outputs.upload_url }}
#          asset_path: ./${{ needs.build.outputs.artifact }}
#          asset_name: ${{ needs.build.outputs.artifact }}
#          asset_content_type: application/zip